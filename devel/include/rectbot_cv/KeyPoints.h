// Generated by gencpp from file rectbot_cv/KeyPoints.msg
// DO NOT EDIT!


#ifndef RECTBOT_CV_MESSAGE_KEYPOINTS_H
#define RECTBOT_CV_MESSAGE_KEYPOINTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>
#include <std_msgs/Float32.h>

namespace rectbot_cv
{
template <class ContainerAllocator>
struct KeyPoints_
{
  typedef KeyPoints_<ContainerAllocator> Type;

  KeyPoints_()
    : point()
    , score()  {
    }
  KeyPoints_(const ContainerAllocator& _alloc)
    : point(_alloc)
    , score(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _score_type;
  _score_type score;





  typedef boost::shared_ptr< ::rectbot_cv::KeyPoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rectbot_cv::KeyPoints_<ContainerAllocator> const> ConstPtr;

}; // struct KeyPoints_

typedef ::rectbot_cv::KeyPoints_<std::allocator<void> > KeyPoints;

typedef boost::shared_ptr< ::rectbot_cv::KeyPoints > KeyPointsPtr;
typedef boost::shared_ptr< ::rectbot_cv::KeyPoints const> KeyPointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rectbot_cv::KeyPoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rectbot_cv::KeyPoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rectbot_cv::KeyPoints_<ContainerAllocator1> & lhs, const ::rectbot_cv::KeyPoints_<ContainerAllocator2> & rhs)
{
  return lhs.point == rhs.point &&
    lhs.score == rhs.score;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rectbot_cv::KeyPoints_<ContainerAllocator1> & lhs, const ::rectbot_cv::KeyPoints_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rectbot_cv

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rectbot_cv::KeyPoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rectbot_cv::KeyPoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rectbot_cv::KeyPoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rectbot_cv::KeyPoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rectbot_cv::KeyPoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rectbot_cv::KeyPoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rectbot_cv::KeyPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "92f94618554fe5449a29ca0200149d32";
  }

  static const char* value(const ::rectbot_cv::KeyPoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x92f94618554fe544ULL;
  static const uint64_t static_value2 = 0x9a29ca0200149d32ULL;
};

template<class ContainerAllocator>
struct DataType< ::rectbot_cv::KeyPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rectbot_cv/KeyPoints";
  }

  static const char* value(const ::rectbot_cv::KeyPoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rectbot_cv::KeyPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point32 point\n"
"std_msgs/Float32 score\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::rectbot_cv::KeyPoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rectbot_cv::KeyPoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
      stream.next(m.score);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct KeyPoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rectbot_cv::KeyPoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rectbot_cv::KeyPoints_<ContainerAllocator>& v)
  {
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "score: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.score);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RECTBOT_CV_MESSAGE_KEYPOINTS_H
