#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import Imu, MagneticField
import time
import board
import busio
from adafruit_bno08x import (
    BNO_REPORT_ACCELEROMETER,
    BNO_REPORT_GYROSCOPE,
    BNO_REPORT_MAGNETOMETER,
    BNO_REPORT_ROTATION_VECTOR,
    BNO_REPORT_GAME_ROTATION_VECTOR
)
from adafruit_bno08x.i2c import BNO08X_I2C

i2c = busio.I2C(board.SCL_1, board.SDA_1, frequency=400000)
bno = BNO08X_I2C(i2c)

# bno.soft_reset()

bno.enable_feature(BNO_REPORT_ACCELEROMETER)
bno.enable_feature(BNO_REPORT_GYROSCOPE)
bno.enable_feature(BNO_REPORT_MAGNETOMETER)
# bno.enable_feature(BNO_REPORT_ROTATION_VECTOR)
bno.enable_feature(BNO_REPORT_GAME_ROTATION_VECTOR)

bno.begin_calibration()

def main():
    rospy.init_node('bno_080')
    imu_msg = Imu()
    pub_imu = rospy.Publisher('imu', Imu, queue_size=100)
    mag_msg = MagneticField()
    pub_mag = rospy.Publisher('magnetic', MagneticField, queue_size=100)
    rate = rospy.Rate(20)
    while not rospy.is_shutdown():
        imu_msg.header.stamp = rospy.Time.now()
        imu_msg.header.frame_id = 'imu_link'
        accel_x, accel_y, accel_z = bno.acceleration
        gyro_x, gyro_y, gyro_z = bno.gyro
        # mag_x, mag_y, mag_z = bno.magnetic
        quat_i, quat_j, quat_k, quat_real = bno.game_quaternion
        imu_msg.angular_velocity.x=gyro_x
        imu_msg.angular_velocity.y=gyro_y
        imu_msg.angular_velocity.z=gyro_z
        imu_msg.angular_velocity_covariance[0]=0.0611
        imu_msg.angular_velocity_covariance[4]=0.0611
        imu_msg.angular_velocity_covariance[8]=0.0611
        imu_msg.linear_acceleration.x=accel_x
        imu_msg.linear_acceleration.y=accel_y
        imu_msg.linear_acceleration.z=accel_z
        imu_msg.linear_acceleration_covariance[0]=0.3
        imu_msg.linear_acceleration_covariance[4]=0.3
        imu_msg.linear_acceleration_covariance[8]=0.3
        imu_msg.orientation.x=quat_i
        imu_msg.orientation.y=quat_j
        imu_msg.orientation.z=quat_k
        imu_msg.orientation.w=quat_real
        imu_msg.orientation_covariance[0]=0.0541
        imu_msg.orientation_covariance[4]=0.0541
        imu_msg.orientation_covariance[8]=0.05
        pub_imu.publish(imu_msg)

        # mag_msg.header = imu_msg.header
        # mag_msg.magnetic_field.x = mag_x
        # mag_msg.magnetic_field.y = mag_y
        # mag_msg.magnetic_field.z = mag_z
        # pub_mag.publish(mag_msg)

        rate.sleep()


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
