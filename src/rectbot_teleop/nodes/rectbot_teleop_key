#!/usr/bin/env python

import rospy
from geometry_msgs.msg import Twist
from std_msgs.msg import Float64
import sys, select, os
if os.name == 'nt':
  import msvcrt
else:
  import tty, termios

msg = """
Control ARAR ReCTBot!
---------------------------
Moving around:
        w
   a    s    d
        x

space key, s : force stop

Wings control:
  left wing  |  right wing
open | close | close | open
 u       i       o      p

CTRL-C to quit
"""

e = """
Communications Failed
"""

def getKey():
    if os.name == 'nt':
      return msvcrt.getch()

    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

def vels(target_linear_vel, target_angular_vel):
    return "currently:\tlinear vel %s\t angular vel %s " % (target_linear_vel,target_angular_vel)

def makeSimpleProfile(output, input, slop):
    if input > output:
        output = min( input, output + slop )
    elif input < output:
        output = max( input, output - slop )
    else:
        output = input

    return output

def constrain(input, low, high):
    if input < low:
      input = low
    elif input > high:
      input = high
    else:
      input = input

    return input


if __name__=="__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('rectbot_teleop')
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)
    pub1 = rospy.Publisher('rectbot/LeftWingJoint_PositionController/command', Float64, queue_size=10)
    pub2 = rospy.Publisher('rectbot/RightWingJoint_PositionController/command', Float64, queue_size=10)

    status = 0
    target_linear_vel   = 0.0
    target_angular_vel  = 0.0
    control_linear_vel  = 0.0
    control_angular_vel = 0.0
    target_lwc_vel      = 0.0
    target_rwc_vel      = 0.0
    target_wc_rel       = 0.0

    try:
        print msg
        while(1):
            key = getKey()
            if key == 'w' :
                target_linear_vel = constrain(target_linear_vel + 0.1, -1.0, 1.0)
                status = status + 1
                #print vels(target_linear_vel,target_angular_vel)
            elif key == 'x' :
                target_linear_vel = constrain(target_linear_vel - 0.1, -1.0, 1.0)
                status = status + 1
                #print vels(target_linear_vel,target_angular_vel)
            elif key == 'a' :
                target_angular_vel = constrain(target_angular_vel + 0.1, -3.0, 3.0)
                status = status + 1
                #print vels(target_linear_vel,target_angular_vel)
            elif key == 'd' :
                target_angular_vel = constrain(target_angular_vel - 0.1, -3.0, 3.0)
                status = status + 1
                #print vels(target_linear_vel,target_angular_vel)
            elif key == 'o' :
                target_rwc_vel = constrain(target_rwc_vel + 0.01, 0.0, 0.85)
                status = status + 1
            elif key == 'p' :
                target_rwc_vel = constrain(target_rwc_vel - 0.01, 0.0, 0.85)
                status = status + 1
            elif key == 'i' :
                target_lwc_vel = constrain(target_lwc_vel + 0.01, 0.0, 0.85)
                status = status + 1
            elif key == 'u' :
                target_lwc_vel = constrain(target_lwc_vel - 0.01, 0.0, 0.85)
                status = status + 1
            elif key == 'j' :
                target_lwc_vel = constrain(target_lwc_vel + 0.85, 0.0, 0.85)
                target_rwc_vel = constrain(target_rwc_vel + 0.85, 0.0, 0.85)
                status = status + 1
            elif key == 'k' :
                target_lwc_vel = constrain(target_lwc_vel - 0.85, 0.0, 0.85)
                target_rwc_vel = constrain(target_rwc_vel - 0.85, 0.0, 0.85)
                status = status + 1
            elif key == ' ' or key == 's' :
                target_linear_vel   = 0.0
                control_linear_vel  = 0.0
                target_angular_vel  = 0.0
                control_angular_vel = 0.0
                #print vels(target_linear_vel, target_angular_vel)
            else:
                if (key == '\x03'):
                    break

            if status == 20 :
                #print msg
                status = 0

            pub1.publish(target_lwc_vel)
            pub2.publish(target_rwc_vel)

            twist = Twist()

            control_linear_vel = makeSimpleProfile(control_linear_vel, target_linear_vel, (0.1/2.0))
            twist.linear.x = control_linear_vel; twist.linear.y = 0.0; twist.linear.z = 0.0

            control_angular_vel = makeSimpleProfile(control_angular_vel, target_angular_vel, (0.1/2.0))
            twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = control_angular_vel

            pub.publish(twist)

    except:
        print e

    finally:
        twist = Twist()
        twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
        twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
        pub.publish(twist)
        pub1.publish(target_lwc_vel)
        pub2.publish(target_rwc_vel)

    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
