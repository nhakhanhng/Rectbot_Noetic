#!/usr/bin/env python

import rospy
import serial
from std_msgs.msg import Float32

def read_angle_from_serial(port, baudrate):
    try:
        ser = serial.Serial(port, baudrate, timeout=1)
        # rospy.loginfo("Serial port opened successfully.")
        print "Serial port opened successfully."
        return ser
    except serial.SerialException as e:
        # rospy.logerr(f"Failed to open serial port")
        print "Failed to open serial port: {}".format(e)
        return None

def mic_array_node():
    rospy.init_node('mic_array')
    port = rospy.get_param('~port', '/dev/k210')
    baudrate = rospy.get_param('~baudrate', 115200)
    pub = rospy.Publisher('sound_direction', Float32, queue_size=10)

    ser = read_angle_from_serial(port, baudrate)
    if not ser:
        rospy.signal_shutdown("Failed to open serial port.")
        return

    samples = []
    # rate = rospy.Rate(1)  # 10 Hz
    while not rospy.is_shutdown():
        try:
            if ser.in_waiting > 0:
                samples = []
                sample_count = 0
                while sample_count < 20:
                    try:
                        line = ser.readline().decode('utf-8').strip()
                        # print "Received line: {}".format(line)  # Debugging line
                        data_parts = line.split(';')
                        if len(data_parts) > 0:
                            line = data_parts[0]
                            sample_angle = (float(line) - 180.0) % 360.0
                            sample_angle = (sample_angle - 360.0) if sample_angle > 180.0 else sample_angle
                            sample_angle = -sample_angle

                            if len(samples) == 0 or abs(sample_angle - sum(samples) / len(samples)) <= 20:
                                samples.append(sample_angle)
                            sample_count += 1
                    except ValueError:
                        # rospy.logwarn("Received invalid data from serial.")
                        continue
                if len(samples) <= sample_count / 2:
                    rospy.logwarn("Not enough valid samples received.")
                    continue
                angle = sum(samples) / len(samples)
                pub.publish(angle)
        except ValueError:
            rospy.logwarn("Received invalid data from serial.")
        except serial.SerialException as e:
            rospy.logerr("Serial error: {}".format(e))
            break
        # rate.sleep()

    ser.close()

if __name__ == '__main__':
    try:
        mic_array_node()
    except rospy.ROSInterruptException:
        pass