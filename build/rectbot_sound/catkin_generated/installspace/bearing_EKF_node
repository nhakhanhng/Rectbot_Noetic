#!/usr/bin/env python2
import rospy
import math
import numpy as np
from nav_msgs.msg import Odometry
from geometry_msgs.msg import PoseStamped, PointStamped
from std_msgs.msg import Float64 as Float

# from filterpy.kalman import ExtendedKalmanFilter as EKF
# from sound_msgs.msg import SoundDirectionStamped

class BearingEKF(object):
    def __init__(self):
        rospy.init_node('bearing_node')
        self.x = np.zeros((2,1), dtype=float)
        self.P = np.eye(2)*10.0
        self.first_update = True
        self.ekf_ready = False

        self.sub_dir = rospy.Subscriber('/sound_direction', Float, self.dir_cb)
        self.sub_odom = rospy.Subscriber('/odom', Odometry, self.odom_cb)
        self.sub_init = rospy.Subscriber('/sound_source_init', PointStamped, self.init_cb)

        self.pub_est = rospy.Publisher('/sound_source', PoseStamped, queue_size=10)
        self.robot_pose = None

    def odom_cb(self, msg):
        self.robot_pose = msg

    def init_cb(self, msg):
        self.x[0,0] = msg.point.x
        self.x[1,0] = msg.point.y
        self.P = np.eye(2) * 0.25
        self.ekf_ready = True
        self.first_update = False
        rospy.loginfo('EKF initialized at x={:.2f}, y={:.2f}'.format(msg.point.x, msg.point.y))

    def dir_cb(self, msg):
        if self.robot_pose is None or not self.ekf_ready:
            return
        xr = self.robot_pose.pose.pose.position.x
        yr = self.robot_pose.pose.pose.position.y
        q = self.robot_pose.pose.pose.orientation
        yaw = self.yaw_from_quat(q)

        theta_meas = msg.theta + yaw
        R = msg.theta_var if msg.theta_var > 1e-6 else 0.01

        # EKF predict (source static)
        self.P += np.eye(2)*1e-5

        dx = self.x[0,0] - xr
        dy = self.x[1,0] - yr
        r2 = dx*dx + dy*dy
        if r2 < 1e-6:
            return
        z_pred = math.atan2(dy, dx) - yaw
        z_pred = math.atan2(math.sin(z_pred), math.cos(z_pred))
        H = np.array([[ dy/r2, -dx/r2 ]])  # 1x2

        S = H.dot(self.P).dot(H.T) + R
        K = self.P.dot(H.T) / S

        innov = self.angle_diff(theta_meas, z_pred)
        self.x += K * innov
        self.P = (np.eye(2) - K.dot(H)).dot(self.P)

        self.publish_pose(msg.header)

    def publish_pose(self, hdr):
        pose = PoseStamped()
        pose.header = hdr
        pose.pose.position.x = float(self.x[0,0])
        pose.pose.position.y = float(self.x[1,0])
        pose.pose.position.z = 0.0
        pose.pose.orientation.w = 1.0
        self.pub_est.publish(pose)

    @staticmethod
    def yaw_from_quat(q):
        siny_cosp = 2*(q.w*q.z + q.x*q.y)
        cosy_cosp = 1 - 2*(q.y*q.y + q.z*q.z)
        return math.atan2(siny_cosp, cosy_cosp)

    @staticmethod
    def angle_diff(a,b):
        d = a - b
        return math.atan2(math.sin(d), math.cos(d))

if __name__ == '__main__':
    node = BearingEKF()
    rospy.spin()
