#!/usr/bin/env python2
import rospy
from nav_msgs.msg import Odometry
# from sound_msgs.msg import SoundDirectionStamped
from geometry_msgs.msg import PointStamped,PoseStamped
from std_msgs.msg import Float32 as Float
import math

class BearingInitNode(object):
    def __init__(self):
        rospy.init_node('bearing_init_node')
        rospy.loginfo("Starting bearing_init_node...")
        self.sub_dir = rospy.Subscriber('/sound_direction', Float, self.dir_cb)
        self.sub_odom = rospy.Subscriber('/odometry/filtered', Odometry, self.odom_cb)
        self.pub_init = rospy.Publisher('/sound_source_init', PoseStamped, queue_size=10)

        self.poses_bearings = []
        self.current_pose = None
        self.min_angle_diff = 20
        self.has_published = False

    def odom_cb(self, msg):
        # rospy.loginfo("Received odometry: position x={:.2f}, y={:.2f}, z={:.2f}".format(
        #     msg.pose.pose.position.x, 
        #     msg.pose.pose.position.y, 
        #     msg.pose.pose.position.z
        # ))
        self.current_pose = msg.pose.pose

    def dir_cb(self, msg):
        if self.current_pose is None or self.has_published:
            return
        rospy.loginfo("Received sound direction: theta={:.2f}".format(msg.data))
        q = self.current_pose.orientation
        yaw = self.quat_to_yaw(q)
        bearing_abs = yaw + msg.data
        pos = self.current_pose.position
        self.poses_bearings.append(((pos.x, pos.y, yaw), bearing_abs))

        if len(self.poses_bearings) >= 2:
            p1, b1 = self.poses_bearings[-2]
            p2, b2 = self.poses_bearings[-1]
            rospy.loginfo("Angle difference between bearings: {:.2f}".format(abs(self.angle_diff(b1, b2))))
            if abs(self.angle_diff(b1, b2)) >= self.min_angle_diff:
                intersect = self.intersect_two_bearings(p1, b1, p2, b2)
                if intersect is not None:
                    x, y = intersect
                    rospy.loginfo('Init position from 2 bearings: x={:.2f}, y={:.2f}'.format(x,y))
                    pt_msg = PoseStamped()
                    pt_msg.header.stamp = rospy.Time.now()
                    pt_msg.header.frame_id = 'map'
                    pt_msg.pose.position.x = x
                    pt_msg.pose.position.y = y
                    pt_msg.pose.position.z = 0.0
                    self.pub_init.publish(pt_msg)
                    self.has_published = True

    @staticmethod
    def intersect_two_bearings(p1, b1, p2, b2):
        x1, y1, _ = p1
        x2, y2, _ = p2
        denom = math.tan(b1) - math.tan(b2)
        if abs(denom) < 1e-3:
            return None
        x = (math.tan(b1)*x1 - math.tan(b2)*x2 + y2 - y1) / denom
        y = math.tan(b1)*(x - x1) + y1
        return x, y

    @staticmethod
    def quat_to_yaw(q):
        siny_cosp = 2.0 * (q.w * q.z + q.x * q.y)
        cosy_cosp = 1.0 - 2.0 * (q.y * q.y + q.z * q.z)
        return math.atan2(siny_cosp, cosy_cosp)

    @staticmethod
    def angle_diff(a, b):
        d = a - b
        return math.atan2(math.sin(d), math.cos(d))

if __name__ == '__main__':
    node = BearingInitNode()
    rospy.spin()
